{"ast":null,"code":"var _jsxFileName = \"/Users/teyemichael/Desktop/code/react/try/Assignment1/policycondashboard/src/components/GrowthChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport ApexCharts from 'apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet config = {\n  colors: {\n    primary: '#696cff',\n    secondary: '#8592a3',\n    success: '#71dd37',\n    info: '#03c3ec',\n    warning: '#ffab00',\n    danger: '#ff3e1d',\n    dark: '#233446',\n    black: '#000',\n    white: '#fff',\n    cardColor: '#fff',\n    bodyBg: '#f5f5f9',\n    bodyColor: '#697a8d',\n    headingColor: '#566a7f',\n    textMuted: '#a1acb8',\n    borderColor: '#eceef1',\n    axisColor: '#eceef1'\n  }\n};\nconst GrowthChart = () => {\n  _s();\n  const growthChartEl = useRef(null);\n  let cardColor, headingColor, axisColor, shadeColor, borderColor;\n  cardColor = config.colors.cardColor;\n  headingColor = config.colors.headingColor;\n  axisColor = config.colors.axisColor;\n  borderColor = config.colors.borderColor;\n\n  // useEffect(() => {\n  //    const growthChartOptions = {\n  //   series: [78],\n  //   labels: ['Growth'],\n  //   chart: {\n  //     height: 240,\n  //     type: 'radialBar',\n  //   },\n  //   plotOptions: {\n  //     radialBar: {\n  //       size: 150,\n  //       offsetY: 10,\n  //       startAngle: -150,\n  //       endAngle: 150,\n  //       hollow: {\n  //         size: '55%',\n  //       },\n  //       track: {\n  //         background: 'red', // Replace 'cardColor' with your variable or color value\n  //         strokeWidth: '100%',\n  //       },\n  //       dataLabels: {\n  //         name: {\n  //           offsetY: 15,\n  //           color: 'blue', // Replace 'headingColor' with your variable or color value\n  //           fontSize: '15px',\n  //           fontWeight: '500',\n  //           fontFamily: 'Public Sans',\n  //         },\n  //         value: {\n  //           offsetY: -25,\n  //           color: 'blue', // Replace 'headingColor' with your variable or color value\n  //           fontSize: '22px',\n  //           fontWeight: '500',\n  //           fontFamily: 'Public Sans',\n  //         },\n  //       },\n  //     },\n  //   },\n  //   colors: ['green'], // Replace 'config.colors.primary' with your variable or color value\n  //   fill: {\n  //     type: 'gradient',\n  //     gradient: {\n  //       shade: 'dark',\n  //       shadeIntensity: 0.5,\n  //       gradientToColors: ['green'], // Replace 'config.colors.primary' with your variable or color value\n  //       inverseColors: true,\n  //       opacityFrom: 1,\n  //       opacityTo: 0.6,\n  //       stops: [30, 70, 100],\n  //     },\n  //   },\n  //   stroke: {\n  //     dashArray: 5,\n  //   },\n  //   grid: {\n  //     padding: {\n  //       top: -35,\n  //       bottom: -10,\n  //     },\n  //   },\n  //   states: {\n  //     hover: {\n  //       filter: {\n  //         type: 'none',\n  //       },\n  //     },\n  //     active: {\n  //       filter: {\n  //         type: 'none',\n  //       },\n  //     },\n  //   },\n  // };\n  const growthChartOptions = {\n    series: [78],\n    labels: ['Growth'],\n    chart: {\n      height: 240,\n      type: 'radialBar'\n    },\n    plotOptions: {\n      radialBar: {\n        size: 150,\n        offsetY: 10,\n        startAngle: -150,\n        endAngle: 150,\n        hollow: {\n          size: '55%'\n        },\n        track: {\n          background: cardColor,\n          strokeWidth: '100%'\n        },\n        dataLabels: {\n          name: {\n            offsetY: 15,\n            color: headingColor,\n            fontSize: '15px',\n            fontWeight: '500',\n            fontFamily: 'Public Sans'\n          },\n          value: {\n            offsetY: -25,\n            color: headingColor,\n            fontSize: '22px',\n            fontWeight: '500',\n            fontFamily: 'Public Sans'\n          }\n        }\n      }\n    },\n    colors: [config.colors.primary],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        shadeIntensity: 0.5,\n        gradientToColors: [config.colors.primary],\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.6,\n        stops: [30, 70, 100]\n      }\n    },\n    stroke: {\n      dashArray: 5\n    },\n    grid: {\n      padding: {\n        top: -35,\n        bottom: -10\n      }\n    },\n    states: {\n      hover: {\n        filter: {\n          type: 'none'\n        }\n      },\n      active: {\n        filter: {\n          type: 'none'\n        }\n      }\n    }\n  };\n  if (growthChartEl.current) {\n    const growthChart = new ApexCharts(growthChartEl.current, growthChartOptions);\n    growthChart.render();\n  }\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: growthChartEl,\n    id: \"growthChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 10\n  }, this);\n};\n_s(GrowthChart, \"Nml62YNqefGCT5qz6ePYGwc+FwM=\");\n_c = GrowthChart;\nexport default GrowthChart;\nvar _c;\n$RefreshReg$(_c, \"GrowthChart\");","map":{"version":3,"names":["React","useRef","ApexCharts","jsxDEV","_jsxDEV","config","colors","primary","secondary","success","info","warning","danger","dark","black","white","cardColor","bodyBg","bodyColor","headingColor","textMuted","borderColor","axisColor","GrowthChart","_s","growthChartEl","shadeColor","growthChartOptions","series","labels","chart","height","type","plotOptions","radialBar","size","offsetY","startAngle","endAngle","hollow","track","background","strokeWidth","dataLabels","name","color","fontSize","fontWeight","fontFamily","value","fill","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","stroke","dashArray","grid","padding","top","bottom","states","hover","filter","active","current","growthChart","render","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/teyemichael/Desktop/code/react/try/Assignment1/policycondashboard/src/components/GrowthChart.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport ApexCharts from 'apexcharts';\n\nlet config = {\n    colors: {\n      primary: '#696cff',\n      secondary: '#8592a3',\n      success: '#71dd37',\n      info: '#03c3ec',\n      warning: '#ffab00',\n      danger: '#ff3e1d',\n      dark: '#233446',\n      black: '#000',\n      white: '#fff',\n      cardColor: '#fff',\n      bodyBg: '#f5f5f9',\n      bodyColor: '#697a8d',\n      headingColor: '#566a7f',\n      textMuted: '#a1acb8',\n      borderColor: '#eceef1',\n      axisColor:'#eceef1'\n    }\n};\n\nconst GrowthChart: React.FC = () => {\n  const growthChartEl = useRef<HTMLDivElement>(null);\n  let cardColor:string, headingColor:string, axisColor:string, shadeColor, borderColor;\n\n  cardColor = config.colors.cardColor;\n  headingColor = config.colors.headingColor;\n  axisColor = config.colors.axisColor;\n  borderColor = config.colors.borderColor;\n\n  // useEffect(() => {\n  //    const growthChartOptions = {\n  //   series: [78],\n  //   labels: ['Growth'],\n  //   chart: {\n  //     height: 240,\n  //     type: 'radialBar',\n  //   },\n  //   plotOptions: {\n  //     radialBar: {\n  //       size: 150,\n  //       offsetY: 10,\n  //       startAngle: -150,\n  //       endAngle: 150,\n  //       hollow: {\n  //         size: '55%',\n  //       },\n  //       track: {\n  //         background: 'red', // Replace 'cardColor' with your variable or color value\n  //         strokeWidth: '100%',\n  //       },\n  //       dataLabels: {\n  //         name: {\n  //           offsetY: 15,\n  //           color: 'blue', // Replace 'headingColor' with your variable or color value\n  //           fontSize: '15px',\n  //           fontWeight: '500',\n  //           fontFamily: 'Public Sans',\n  //         },\n  //         value: {\n  //           offsetY: -25,\n  //           color: 'blue', // Replace 'headingColor' with your variable or color value\n  //           fontSize: '22px',\n  //           fontWeight: '500',\n  //           fontFamily: 'Public Sans',\n  //         },\n  //       },\n  //     },\n  //   },\n  //   colors: ['green'], // Replace 'config.colors.primary' with your variable or color value\n  //   fill: {\n  //     type: 'gradient',\n  //     gradient: {\n  //       shade: 'dark',\n  //       shadeIntensity: 0.5,\n  //       gradientToColors: ['green'], // Replace 'config.colors.primary' with your variable or color value\n  //       inverseColors: true,\n  //       opacityFrom: 1,\n  //       opacityTo: 0.6,\n  //       stops: [30, 70, 100],\n  //     },\n  //   },\n  //   stroke: {\n  //     dashArray: 5,\n  //   },\n  //   grid: {\n  //     padding: {\n  //       top: -35,\n  //       bottom: -10,\n  //     },\n  //   },\n  //   states: {\n  //     hover: {\n  //       filter: {\n  //         type: 'none',\n  //       },\n  //     },\n  //     active: {\n  //       filter: {\n  //         type: 'none',\n  //       },\n  //     },\n  //   },\n  // };\n   const growthChartOptions = {\n    series: [78],\n    labels: ['Growth'],\n    chart: {\n      height: 240,\n      type: 'radialBar'\n    },\n    plotOptions: {\n      radialBar: {\n        size: 150,\n        offsetY: 10,\n        startAngle: -150,\n        endAngle: 150,\n        hollow: {\n          size: '55%'\n        },\n        track: {\n          background: cardColor,\n          strokeWidth: '100%'\n        },\n        dataLabels: {\n          name: {\n            offsetY: 15,\n            color: headingColor,\n            fontSize: '15px',\n            fontWeight: '500',\n            fontFamily: 'Public Sans'\n          },\n          value: {\n            offsetY: -25,\n            color: headingColor,\n            fontSize: '22px',\n            fontWeight: '500',\n            fontFamily: 'Public Sans'\n          }\n        }\n      }\n    },\n    colors: [config.colors.primary],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        shadeIntensity: 0.5,\n        gradientToColors: [config.colors.primary],\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.6,\n        stops: [30, 70, 100]\n      }\n    },\n    stroke: {\n      dashArray: 5\n    },\n    grid: {\n      padding: {\n        top: -35,\n        bottom: -10\n      }\n    },\n    states: {\n      hover: {\n        filter: {\n          type: 'none'\n        }\n      },\n      active: {\n        filter: {\n          type: 'none'\n        }\n      }\n    }\n  };\n\n    if (growthChartEl.current) {\n      const growthChart = new ApexCharts(growthChartEl.current, growthChartOptions);\n      growthChart.render();\n    }\n  // }, []);\n\n  return <div ref={growthChartEl} id=\"growthChart\" />;\n};\n\nexport default GrowthChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}