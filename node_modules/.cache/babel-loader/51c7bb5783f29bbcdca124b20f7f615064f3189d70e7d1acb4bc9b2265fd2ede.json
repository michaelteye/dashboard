{"ast":null,"code":"var _jsxFileName = \"/Users/teyemichael/Desktop/code/react/try/Assignment1/policycondashboard/src/components/ProfileReportChart.tsx\",\n  _s = $RefreshSig$();\nimport ApexCharts from 'apexcharts';\nimport { useEffect, useRef } from 'react';\nimport config from '../config/config'; // Make sure config is properly imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = () => {\n  _s();\n  const profileReportChartEl = useRef(null);\n  useEffect(() => {\n    let cardColor, headingColor, axisColor, shadeColor, borderColor;\n\n    // Assuming config is available or imported properly\n    cardColor = config.colors.cardColor;\n    headingColor = config.colors.headingColor;\n    axisColor = config.colors.axisColor;\n    borderColor = config.colors.borderColor;\n    const profileReportChartConfig = {\n      chart: {\n        height: 80,\n        type: 'line',\n        toolbar: {\n          show: false\n        },\n        dropShadow: {\n          enabled: true,\n          top: 10,\n          left: 5,\n          blur: 3,\n          color: config.colors.warning,\n          opacity: 0.15\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          right: 8\n        }\n      },\n      colors: [config.colors.warning],\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 5,\n        curve: 'smooth'\n      },\n      series: [{\n        data: [110, 270, 145, 245, 205, 285]\n      }],\n      xaxis: {\n        show: false,\n        lines: {\n          show: false\n        },\n        labels: {\n          show: false\n        },\n        axisBorder: {\n          show: false\n        }\n      },\n      yaxis: {\n        show: false\n      }\n    };\n    if (profileReportChartEl.current !== null) {\n      // Manually assert the type of current to HTMLElement\n      const element = profileReportChartEl.current;\n\n      // Destroy any existing chart instance before rendering a new one\n      if (element.innerHTML !== '') {\n        element.innerHTML = '';\n      }\n      const profileReportChart = new ApexCharts(element, profileReportChartConfig);\n      profileReportChart.render();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: profileReportChartEl,\n    id: \"profileReportChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 12\n  }, this);\n};\n_s(ChartComponent, \"WZL9QGAw5r3bmW9J/Zah+U7M8tU=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["ApexCharts","useEffect","useRef","config","jsxDEV","_jsxDEV","ChartComponent","_s","profileReportChartEl","cardColor","headingColor","axisColor","shadeColor","borderColor","colors","profileReportChartConfig","chart","height","type","toolbar","show","dropShadow","enabled","top","left","blur","color","warning","opacity","sparkline","grid","padding","right","dataLabels","stroke","width","curve","series","data","xaxis","lines","labels","axisBorder","yaxis","current","element","innerHTML","profileReportChart","render","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/teyemichael/Desktop/code/react/try/Assignment1/policycondashboard/src/components/ProfileReportChart.tsx"],"sourcesContent":["import ApexCharts from 'apexcharts';\nimport { useEffect, useRef } from 'react';\nimport config from '../config/config'; // Make sure config is properly imported\n\nconst ChartComponent = () => {\n  const profileReportChartEl = useRef(null);\n\n  useEffect(() => {\n    let cardColor, headingColor, axisColor, shadeColor, borderColor;\n\n    // Assuming config is available or imported properly\n    cardColor = config.colors.cardColor;\n    headingColor = config.colors.headingColor;\n    axisColor = config.colors.axisColor;\n    borderColor = config.colors.borderColor;\n    const profileReportChartConfig = {\n        chart: {\n          height: 80,\n          type: 'line',\n          toolbar: {\n            show: false\n          },\n          dropShadow: {\n            enabled: true,\n            top: 10,\n            left: 5,\n            blur: 3,\n            color: config.colors.warning,\n            opacity: 0.15\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        grid: {\n          show: false,\n          padding: {\n            right: 8\n          }\n        },\n        colors: [config.colors.warning],\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          width: 5,\n          curve: 'smooth'\n        },\n        series: [\n          {\n            data: [110, 270, 145, 245, 205, 285]\n          }\n        ],\n        xaxis: {\n          show: false,\n          lines: {\n            show: false\n          },\n          labels: {\n            show: false\n          },\n          axisBorder: {\n            show: false\n          }\n        },\n        yaxis: {\n          show: false\n        }\n      };\n\n      if (profileReportChartEl.current !== null) {\n        // Manually assert the type of current to HTMLElement\n        const element = profileReportChartEl.current as HTMLElement;\n  \n        // Destroy any existing chart instance before rendering a new one\n        if (element.innerHTML !== '') {\n          element.innerHTML = '';\n        }\n  \n        const profileReportChart = new ApexCharts(element, profileReportChartConfig);\n        profileReportChart.render();\n      }\n    }, []);\n  \n    return <div ref={profileReportChartEl} id=\"profileReportChart\"></div>;\n  };\n\nexport default ChartComponent;\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,MAAM,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,oBAAoB,GAAGN,MAAM,CAAC,IAAI,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW;;IAE/D;IACAJ,SAAS,GAAGN,MAAM,CAACW,MAAM,CAACL,SAAS;IACnCC,YAAY,GAAGP,MAAM,CAACW,MAAM,CAACJ,YAAY;IACzCC,SAAS,GAAGR,MAAM,CAACW,MAAM,CAACH,SAAS;IACnCE,WAAW,GAAGV,MAAM,CAACW,MAAM,CAACD,WAAW;IACvC,MAAME,wBAAwB,GAAG;MAC7BC,KAAK,EAAE;QACLC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACPC,IAAI,EAAE;QACR,CAAC;QACDC,UAAU,EAAE;UACVC,OAAO,EAAE,IAAI;UACbC,GAAG,EAAE,EAAE;UACPC,IAAI,EAAE,CAAC;UACPC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAEvB,MAAM,CAACW,MAAM,CAACa,OAAO;UAC5BC,OAAO,EAAE;QACX,CAAC;QACDC,SAAS,EAAE;UACTP,OAAO,EAAE;QACX;MACF,CAAC;MACDQ,IAAI,EAAE;QACJV,IAAI,EAAE,KAAK;QACXW,OAAO,EAAE;UACPC,KAAK,EAAE;QACT;MACF,CAAC;MACDlB,MAAM,EAAE,CAACX,MAAM,CAACW,MAAM,CAACa,OAAO,CAAC;MAC/BM,UAAU,EAAE;QACVX,OAAO,EAAE;MACX,CAAC;MACDY,MAAM,EAAE;QACNC,KAAK,EAAE,CAAC;QACRC,KAAK,EAAE;MACT,CAAC;MACDC,MAAM,EAAE,CACN;QACEC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;MACrC,CAAC,CACF;MACDC,KAAK,EAAE;QACLnB,IAAI,EAAE,KAAK;QACXoB,KAAK,EAAE;UACLpB,IAAI,EAAE;QACR,CAAC;QACDqB,MAAM,EAAE;UACNrB,IAAI,EAAE;QACR,CAAC;QACDsB,UAAU,EAAE;UACVtB,IAAI,EAAE;QACR;MACF,CAAC;MACDuB,KAAK,EAAE;QACLvB,IAAI,EAAE;MACR;IACF,CAAC;IAED,IAAIZ,oBAAoB,CAACoC,OAAO,KAAK,IAAI,EAAE;MACzC;MACA,MAAMC,OAAO,GAAGrC,oBAAoB,CAACoC,OAAsB;;MAE3D;MACA,IAAIC,OAAO,CAACC,SAAS,KAAK,EAAE,EAAE;QAC5BD,OAAO,CAACC,SAAS,GAAG,EAAE;MACxB;MAEA,MAAMC,kBAAkB,GAAG,IAAI/C,UAAU,CAAC6C,OAAO,EAAE9B,wBAAwB,CAAC;MAC5EgC,kBAAkB,CAACC,MAAM,CAAC,CAAC;IAC7B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO3C,OAAA;IAAK4C,GAAG,EAAEzC,oBAAqB;IAAC0C,EAAE,EAAC;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACvE,CAAC;AAAC/C,EAAA,CAjFED,cAAc;AAAAiD,EAAA,GAAdjD,cAAc;AAmFpB,eAAeA,cAAc;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}