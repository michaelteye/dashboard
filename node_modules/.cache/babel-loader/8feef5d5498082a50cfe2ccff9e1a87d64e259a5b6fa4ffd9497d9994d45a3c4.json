{"ast":null,"code":"var _jsxFileName = \"/Users/teyemichael/Desktop/code/react/try/Assignment1/policycondashboard/src/components/RevenueChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport ApexCharts from 'apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RevenueChart = () => {\n  _s();\n  const totalRevenueChartEl = useRef(null);\n\n  // useEffect(() => {\n  const totalRevenueChartOptions = {\n    series: [{\n      name: '2021',\n      data: [18, 7, 15, 29, 18, 12, 9]\n    }, {\n      name: '2020',\n      data: [-13, -18, -9, -14, -5, -17, -15]\n    }],\n    chart: {\n      height: 300,\n      stacked: true,\n      type: 'bar',\n      toolbar: {\n        show: false\n      }\n    }\n    // ... (rest of the options)\n    // Add the rest of your options here as per your initial provided configuration\n  };\n  if (totalRevenueChartEl.current) {\n    const totalRevenueChart = new ApexCharts(totalRevenueChartEl.current, totalRevenueChartOptions);\n    totalRevenueChart.render();\n  }\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: totalRevenueChartEl,\n    id: \"totalRevenueChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n};\n_s(RevenueChart, \"SQfaLoVI7Pp27AoPkC50b7wa5cE=\");\n_c = RevenueChart;\nexport default RevenueChart;\nvar _c;\n$RefreshReg$(_c, \"RevenueChart\");","map":{"version":3,"names":["React","useRef","ApexCharts","jsxDEV","_jsxDEV","RevenueChart","_s","totalRevenueChartEl","totalRevenueChartOptions","series","name","data","chart","height","stacked","type","toolbar","show","current","totalRevenueChart","render","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/teyemichael/Desktop/code/react/try/Assignment1/policycondashboard/src/components/RevenueChart.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport ApexCharts from 'apexcharts';\n\nconst RevenueChart: React.FC = () => {\n  const totalRevenueChartEl = useRef<HTMLDivElement>(null);\n\n  // useEffect(() => {\n    const totalRevenueChartOptions: ApexCharts.ApexOptions = {\n      series: [\n        {\n          name: '2021',\n          data: [18, 7, 15, 29, 18, 12, 9],\n        },\n        {\n          name: '2020',\n          data: [-13, -18, -9, -14, -5, -17, -15],\n        },\n      ],\n      chart: {\n        height: 300,\n        stacked: true,\n        type: 'bar',\n        toolbar: { show: false },\n      },\n      // ... (rest of the options)\n      // Add the rest of your options here as per your initial provided configuration\n    };\n\n    if (totalRevenueChartEl.current) {\n      const totalRevenueChart = new ApexCharts(totalRevenueChartEl.current, totalRevenueChartOptions);\n      totalRevenueChart.render();\n    }\n  // }, []);\n\n  return <div ref={totalRevenueChartEl} id=\"totalRevenueChart\" />;\n};\n\nexport default RevenueChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,MAAM,QAAQ,OAAO;AAChD,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,mBAAmB,GAAGN,MAAM,CAAiB,IAAI,CAAC;;EAExD;EACE,MAAMO,wBAAgD,GAAG;IACvDC,MAAM,EAAE,CACN;MACEC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACjC,CAAC,EACD;MACED,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;IACxC,CAAC,CACF;IACDC,KAAK,EAAE;MACLC,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE;QAAEC,IAAI,EAAE;MAAM;IACzB;IACA;IACA;EACF,CAAC;EAED,IAAIV,mBAAmB,CAACW,OAAO,EAAE;IAC/B,MAAMC,iBAAiB,GAAG,IAAIjB,UAAU,CAACK,mBAAmB,CAACW,OAAO,EAAEV,wBAAwB,CAAC;IAC/FW,iBAAiB,CAACC,MAAM,CAAC,CAAC;EAC5B;EACF;;EAEA,oBAAOhB,OAAA;IAAKiB,GAAG,EAAEd,mBAAoB;IAACe,EAAE,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjE,CAAC;AAACpB,EAAA,CAhCID,YAAsB;AAAAsB,EAAA,GAAtBtB,YAAsB;AAkC5B,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}